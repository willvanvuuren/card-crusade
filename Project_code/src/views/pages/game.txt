<%- include ('../partials/header') %>
    <%- include ('../partials/navbargame') %>
        <!DOCTYPE html>
        <html>

        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
                integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT"
                crossorigin="anonymous" />

            <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css" />


            <style>
                body {
                    font-family: system-ui;
                    background-color: #b1060f;
                }

                .container {
                    border-style: outset;
                    border-width: medium;
                    border-color: #efd28d;
                    text-align: center;

                }

                /* The Modal (background) */
                .modal {
                    display: none;
                    /* Hidden by default */

                    padding-top: 100px;
                    /* Location of the box */

                    width: 100%;
                    /* Full width */
                    height: 100%;
                    /* Full height */
                    overflow: auto;
                    /* Enable scroll if needed */
                    background-color: rgb(0, 0, 0);
                    /* Fallback color */
                    background-color: rgba(0, 0, 0, 0.4);
                    /* Black w/ opacity */
                }

                /* Modal Content */
                .modal-content {
                    background-color: #104547;
                    color: white;
                    margin: auto;
                    padding: 20px;
                    border: 1px solid #21A0A0;
                    width: 80%;

                }

                .footer {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }

                #but {

                    box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.2);
                    color: white;
                    transition: 0.25s;
                    border-color: #EFD28D;
                    border-width: 2px;
                    width: 150px;
                    height: 32.2px;
                    position: absolute;
                    top: 9px;

                    font-weight: 600;
                    font-size: 15px;
                    letter-spacing: 1px;
                    font-family: system-ui;

                    outline: 0;
                    overflow: hidden;
                    background: none;
                    z-index: 1;
                    cursor: pointer;
                    transition: 0.08s ease-in;
                    -o-transition: 0.08s ease-in;
                    -ms-transition: 0.08s ease-in;
                    -moz-transition: 0.08s ease-in;
                    -webkit-transition: 0.08s ease-in;
                    /*right: 345px; */

                }

                .fill {
                    border-radius: 15px;
                    -webkit-transition: all 150ms cubic-bezier(0.445, 0.050, 0.550, 0.950);
                    transition: all 150ms cubic-bezier(0.445, 0.050, 0.550, 0.950);
                }

                .fill:before {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    top: 0;
                    left: 0;
                    z-index: -1;
                    opacity: 0;
                    -webkit-transition: all 250ms cubic-bezier(0.230, 1.000, 0.320, 1.000);
                    transition: all 250ms cubic-bezier(0.230, 1.000, 0.320, 1.000);
                }

                .fill:after {
                    content: "";
                    position: absolute;
                    background: #ffcb51;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    top: 100%;
                    z-index: -2;
                    -webkit-transition: all 250ms cubic-bezier(0.230, 1.000, 0.320, 1.000);
                    transition: all 250ms cubic-bezier(0.230, 1.000, 0.320, 1.000);
                }

                .fill:hover {
                    color: white;

                }

                .fill:hover:before {
                    opacity: .8;
                }

                .fill:hover:after {
                    top: 0;
                }

                #cardContainer1 {
                    background-color: greenyellow;
                    width: 150px;
                    height: 250px;
                    border: 1px solid #f1f1f1;
                    border-radius: 10px;
                    perspective: 1000px;
                    text-align: center;
                    position: inline;
                }

                #cardContainer2 {
                    background-color: indianred;
                    width: 150px;
                    height: 250px;
                    border: 1px solid #f1f1f1;
                    border-radius: 10px;
                    perspective: 1000px;
                    text-align: center;
                    position: inline;
                }

                #Deck1 {
                    position: absolute;
                    left: 20px;
                    bottom: 10px;
                    height: 270px;
                    width: 180px;
                    background: gray;


                }

                #Deck2 {
                    position: absolute;
                    right: 20px;
                    bottom: 10px;
                    height: 270px;
                    width: 180px;
                    background: greenyellow;
                }

                #deck1Cards {
                    position: absolute;
                    left: 20px;
                    bottom: 0px;
                    height: 320px;
                    width: 180px;
                    z-index: 1000;
                    background: black;
                    color: red;

                }

                #deck2Cards {
                    position: absolute;
                    right: 20px;
                    bottom: 0px;
                    height: 320px;
                    width: 180px;
                    z-index: 1000;
                    background: black;
                    color: red;
                }
            </style>
        </head>

        <body onload="loadComp()">
            <!-- The Modal -->
            <div id="myModal" class="modal">
                <div class="modal-dialog modal-lg">
                    <!-- Modal content -->
                    <div class="modal-content">
                        <!--Content-->
                        <div class="container" style="text-transform:uppercase; font-weight: 800; font-size:xx-large; ">
                            Get ready <%= user.username %>
                        </div>
                        <div class="container" style="margin-top: 25px; margin-bottom: 40px;">
                            <h2 style="margin-top: 20px; font-weight: 800">The Goal </h2>
                            <p>The goal is to be the player that has won the most cards at the end of the game.</p>
                            <h2 style="margin-top: 40px; font-weight: 800">The Deal</h2>
                            <p style="margin-bottom: 50px">The deck is divided evenly, with each player receiving 26
                                cards, dealt one at a time, face down. Each player turns up a card and the player with
                                the higher card takes both cards and puts them on the bottom of his stack. If the cards
                                are the same rank, it is War. Each player turns up one card face down and one card face
                                up. The player with the higher cards takes both piles (six cards). If the turned-up
                                cards are again the same rank, each player places another card face down and turns
                                another card face up. The player with the higher card takes all 10 cards, and so on. The
                                game ends when the deck runs out of cards (26 rounds).</p>
                        </div>
                        <div class="footer">
                            <button type="button" id="but" class="fill" onclick="startGame()" data-dismiss="modal"
                                style="top: 94%">
                                Start Game!
                            </button>
                        </div>
                    </div>
                </div>
            </div> <!-- The Modal -->

            <!--
            <button id="button" onclick="score()">Score Cards</button>
            <button id="button" onclick="generateDecks()">Generate Cards</button>
            <button id="button" onclick="diagonalMove()">Continue Game (Diagonal Transition atm)</button>
            <button id="button" onclick="startGame()">Start Game</button>
            <button id="button" onclick="playCard()">Play Card</button>
            -->
            

                <h1>Card Animation Testing</h1>
                <!-- Deprecated Buttons Below -->
                <!-- <button id="button" onclick="score()">Score Cards</button>
                <button id="button" onclick="generateDecks()">Generate Cards</button>
                <button id="button" onclick="diagonalMove()">Continue Game (Diagonal Transition atm)</button> -->
                <!-- Deprecated Buttons Above -->
                <button id="button" onclick="startGame()">Start Game</button>
                <button id="button" onclick="playCard()">Play Card</button>
                
                <div class="container "> 
                  <div class="row" style="text-align: center;">
                      <h2 >Score</h2>
                      <div class ='col-sm'>
                          <p id="P1Score" style>0 </p>
                      </div>
                      <div class ='col-sm'>
                          <p id="P1Score" style>- </p>
                      </div>
                      <div class ='col-sm'>
                          <p id="P2Score" style>0</p>
                      </div>
                  </div>
                  <div class="row" style="text-align: center;">
                      <p id ="winner"></p>
                  </div>
                
                    <div class="row ">
                        
                        <!-- Empty Space -->
                        <div id ="P1Field" class="col-sm border">
                            <p>P1 Card</p>
                            
                            <div id ="P1FieldCardHolder">
                                Hello
                            </div>
                
                        </div>
                        <div id ="TieField" class ="col-sm border">
                            <p>Tie Pile</p>
                        </div>
                        <div id ="P2Field" class="col-sm border">
                            <p>P2 Card</p>
                            
                            <div id ="P2FieldCardHolder">
                                Hello
                            </div>
                        </div>
                
                    </div>
                    <p id='deck1Cards'>Cards Left: </p>
                    <p id='deck2Cards'>Cards Left:</p>
                    <div class="row gx-5">
                        <div class="col-sm" id = "Deck1">
                        </div>
                
                        <div class="col-sm" id = "Deck2">
                            
                        </div>
                    </div>
                
                </div>


        </body>
        <script>
            $(document).ready(function () {
                $('#myModal').modal('toggle');
            })
            function loadComp() {
                var iconBox = document.getElementById('userIcon');
                var uiconBox = document.getElementById('userIcon1');
                var icon = document.createElement('img');
                var uicon = document.createElement('img');
                //'width:250px; height:200px; position: absolute; left: 3%; bottom: 400px;'
                icon.style.width = '200px';
                icon.style.height = '200px';
                uicon.style.width = '200px';
                uicon.style.height = '200px';
                var nameCont = document.getElementById('compTitle');
                //width:200px; height:40px; position: absolute; right: 5%; bottom: 300px; background-color: #ffcb51; font-weight: 600; font-size:large; color: white; text-align: center;
                nameCont.style.width = '200px';
                nameCont.style.height = '40px';
                nameCont.style.fontWeight = '600';
                nameCont.style.color = 'white';
                nameCont.style.fontSize = 'large';
                nameCont.style.textAlign = 'center';


                var randomChoice = Math.floor(Math.random() * 4);
                if (randomChoice == 0) {
                    //marlene
                    icon.src = 'https://iili.io/H9MvwI2.md.png';
                    nameCont.innerText = "Sorcerer Marlene";



                }
                else if (randomChoice == 1) {
                    //knight
                    icon.src = 'https://iili.io/H9Mvhml.md.png';
                    nameCont.innerText = "Defender Night";

                }
                else if (randomChoice == 2) {
                    //King
                    icon.src = 'https://iili.io/H9MvNXS.md.png';
                    nameCont.innerText = "Royal McKath";

                }
                else if (randomChoice == 3) {
                    //
                    icon.src = 'https://iili.io/H9MvXe4.md.png';
                    nameCont.innerText = "Sharp Shooter Luna";

                }
                iconBox.appendChild(icon);
                uiconBox.appendChild(uicon);

            }
            $(document).on("click", ".flip-container", function () {
                $(this).toggleClass('hover');
            });
            // This value is used to keep track of the movement of the cards
            var index = 0;
            // zIndex Value to keep track 
            var zValueStart = -1000
            //selects the id for card1 element
            var card1 = document.getElementById('cardContainer1');
            //selects the id for card2 element
            var card2 = document.getElementById('cardContainer2');

            //used to store the html location of Deck 1 & Deck 2
            var deck1Pile = document.getElementById("Deck1");
            var deck2Pile = document.getElementById("Deck2");

            //used to store the card ids for the cards in a players deck for access, reinitialized
            var deck1Ids = [];
            var deck2Ids = [];

            //global score values
            var P1Score = 0;
            var P2Score = 0;

            //zindex for viewing cards
            var card1zIndex = 0;
            var card2zIndex = 0;


            //global values for decks, decks should be shuffled
            var deck1 = [1, 2, 3];
            var deck2 = [1, 2, 3];

            //global var to keep track of the ids for the cards in the tie pile
            var TiePile = [];
            //globar var to keep track of the values of the cards in the tie pile
            var TiePileValues = [];

            //html elements for card count in deck
            var P1CardCountHTML = document.getElementById('deck1Cards');
            var P2CardCountHTML = document.getElementById('deck2Cards');

            var cardCount1 = document.createElement('p');
            var cardCount2 = document.createElement('p');

            P1CardCountHTML.appendChild(cardCount1);
            P2CardCountHTML.appendChild(cardCount2);






            //html elements for score count
            var P1ScoreHTML = document.getElementById("P1Score");
            var P2ScoreHTML = document.getElementById("P2Score");
            var winnerHTML = document.getElementById("winner");

            //initialize arrays that will keep track of card game
            var deck1Play = [];
            var deck2Play = [];

            //global variable to store old values of cards and cardIDs, this will be used primarily for 
            var oldCardID = []
            var oldCardValue = []

            //global variable to store round 
            var round = 0;

            //Who Won Flag ,0=tie, 1=1P,2=2P,-1 =starting game
            var whoWonLastRound = -1;
            //slightly deprecated but used to keep track of the html values of the cards
            // var html1 = "<div class='col-sm' id='card1' ;'><div class='flip-box'> <div class='flip-box-inner'> <div class='flip-box-front'> <img alt='Card1' style='width:150px;height:250px'> </div> <div class='flip-box-back'> <h2 id= 'Card2Title'>Card 2</h2> <p>This is the value of the card</p> <p class='p-3 border bg-dark' id='Card2Value' style='width:10px;left:50%;text-align:center;'>2</p> </div> </div></div></div>";
            // var html2 = "<div class='col-sm' id='card2' ;'><div class='flip-box'> <div class='flip-box-inner'> <div class='flip-box-front'> <img alt='Player2' style='width:150px;height:250px'> </div> <div class='flip-box-back'> <h2 id= 'Card2Title'>Card 2</h2> <p>This is the value of the card</p> <p class='p-3 border bg-dark' id='Card2Value' style='width:10px;left:50%;text-align:center;'>2</p> </div> </div></div></div>";

            var lastPlayedNonTieId = [];
            var lastPlayedNonTieValue = [];

            // Helper function to shuffle decks,fisher-yates algorithm

            function shuffleDeck(array1) {
                for (let y = array1.length - 1; y > 0; y--) {
                    const indexer = Math.floor(Math.random() * (y + 1));
                    const placer = array1[y];
                    array1[y] = array1[indexer];
                    array1[indexer] = placer;

                }
            }

            //function used to start a new game and generate a deck
            function startGame() {

                // Used to shuffle deck once shuffle is implemented
                // shuffleDeck(deck1);
                // shuffleDeck(deck2);


                //Reset Game Score and WhoWonFlag
                P1Score = 0;
                P2Score = 0;
                whoWonLastRound = -1;
                cardCount1.innerText = "Cards Left: " + deck1.length;
                cardCount2.innerText = "Cards Left: " + deck2.length;

                //reset arrays that will keep track of card game
                deck1Play = [];
                deck2Play = [];

                //copy deck 1 and deck 2 values
                deck1Play = [...deck1];
                deck2Play = [...deck2];

                //shuffle decks
                shuffleDeck(deck1Play);
                shuffleDeck(deck2Play);

                //reset Deck Ids
                deck1Ids = [];
                deck2Ids = [];

                //refresh zIndex; not really necessary 
                card1zIndex = 0;
                card2zIndex = 0;


                //untested remove feature here
                //remove lingering Children inside deck1Pile and deck2Pile
                deck1Pile.innerHTML = "";
                deck2Pile.innerHTML = "";
                document.getElementById("TieField").innerHTML = "";
                //untested remove feature above
                document.getElementById("P1Field").innerHTML = "<p>P1 Card</p><p id='deck1Cards'>Cards Left:" + (deck1Play.length) + " </p><div id ='P1FieldCardHolder'></div>";
                document.getElementById("P2Field").innerHTML = "<p>P2 Card</p><p id='deck2Cards'>Cards Left:" + (deck2Play.length) + " </p><div id ='P2FieldCardHolder'></div>";
                document.getElementById("P1Score").innerText = 0;
                document.getElementById("P2Score").innerText = 0;
                for (let i = 0; i < deck1Play.length; i++) {

                    //create new card element
                    const newCard1 = document.createElement('div');
                    const newCard2 = document.createElement('div');

                    //create new card value
                    let card1Value = deck1Play[i];
                    let card2Value = deck2Play[i];

                    //set the id for each individual card for css and js manipulation
                    newCard1.id = '1Pcard' + i;
                    newCard2.id = '2Pcard' + i;

                    //create the id for values of cards 1 and 2
                    let newCard1ValueId = "1PCardValue" + i;
                    let newCard2ValueId = "2PCardValue" + i;

                    //setting the HTML of newCard 1 and 2 ,specifically controlling for card value and card value id 
                    newCard1.innerHTML = "<div class='col-sm' id='cardContainer1' ><div class = 'row'> <h6 > Player 1 </h6> </div> <div class ='row'> <h2 id= 'Card1Title'>Card " + i + "</h2> </div> <div class ='row'> <p>This is the value of the card</p> <p class='p-3 border bg-secondary' id='" + newCard1ValueId + "' style='width:10px;left:50%;text-align:center;margin:auto;'>" + card1Value + "</p> </div> </div> ";
                    newCard2.innerHTML = "<div class='col-sm' id='cardContainer2'><div class = 'row'> <h6 > Player 2 </h6> </div> <div class ='row'> <h2 id= 'Card2Title'>Card " + i + "</h2> </div> <div class ='row'> <p>This is the value of the card</p> <p class='p-3 border bg-secondary' id='" + newCard2ValueId + "' style='width:10px;left:50%;text-align:center;margin:auto;'>" + card2Value + "</p> </div> </div> "
                    //zindex added
                    card1zIndex++;
                    card2zIndex--;

                    newCard1.style.position = 'inline';
                    newCard1.style.zIndex = card1zIndex;
                    // newCard1.style.display="none";

                    newCard2.style.zIndex = card2zIndex;
                    newCard2.style.position = 'inline';
                    // newCard2.style.display="none"


                    deck1Pile.appendChild(newCard1);

                    deck1Ids.push(newCard1.id);

                    deck2Pile.appendChild(newCard2);
                    deck2Ids.push(newCard2.id);
                }
                //entry to new game
                console.log("New Game Started");
                console.log("P1Score: " + P1Score + ", P2Score: " + P2Score)
                console.log("deck1Values: " + deck1Play + ", deck1Ids: " + deck1Ids);
                console.log("deck2Values: " + deck2Play + ", deck2Ids: " + deck2Ids);

            }

            function playCard() {
                // document.getElementById("P1Field").innerHTML="<p>P1 Card</p><p id='deck1Cards'>Cards Left: </p>";
                // document.getElementById("P2Field").innerHTML="<p>P2 Card</p><p id='deck2Cards'>Cards Left: </p>";

                //check for game end condition
                P1CardCountHTML.innerText = "Cards Left: " + (deck1Play.length - 1);
                P2CardCountHTML.innerText = "Cards Left: " + (deck2Play.length - 1);

                if (deck1Play.length === 0 || deck2Play.length === 0 || round >= 50) {
                    let P1Score = document.getElementById("P1Score").innerText;
                    let P2Score = document.getElementById("P2Score").innerText;
                    P1CardCountHTML.innerText = "Cards Left: " + (deck1Play.length);
                    P2CardCountHTML.innerText = "Cards Left: " + (deck2Play.length);


                    if (P1Score > P2Score) {

                        document.getElementById('winner').innerText = "P1 wins the game!";
                    } else if (P2Score > P1Score) {
                        document.getElementById('winner').innerText = "P2 wins the game!";

                    } else {
                        document.getElementById('winner').innerText = "It's a final tie!";
                    }

                }

                //handles the case where game does not end
                else {

                    shuffleDeck(deck1Play);
                    shuffleDeck(deck2Play);
                    //select the first element of both player decks

                    let P1CardID = deck1Ids[0];
                    let P2CardID = deck2Ids[0];

                    //used to select the HTML elements of the cards

                    let P1CardHTML = document.getElementById(P1CardID);
                    let P2CardHTML = document.getElementById(P2CardID);

                    console.log("Last Played ID's: ");
                    console.log(lastPlayedNonTieId);
                    if (whoWonLastRound === 1 && round > 0) {


                        $("#" + lastPlayedNonTieId[0]).appendTo("#Deck1");
                        $("#" + lastPlayedNonTieId[1]).appendTo("#Deck1");
                        lastPlayedNonTieId = lastPlayedNonTieId.slice(1);
                        lastPlayedNonTieId = lastPlayedNonTieId.slice(1);

                    } else if (whoWonLastRound === 2 && round > 0) {
                        $("#" + lastPlayedNonTieId[0]).appendTo("#Deck2");
                        $("#" + lastPlayedNonTieId[1]).appendTo("#Deck2");
                        lastPlayedNonTieId = lastPlayedNonTieId.slice(1);
                        lastPlayedNonTieId = lastPlayedNonTieId.slice(1);
                    }


                    // P1CardHTML.style.position = 'absolute';
                    P1CardHTML.style.display = 'inline';

                    // P2CardHTML.style.position = 'absolute';
                    P2CardHTML.style.position = 'inline';
                    //card to move cards from deck into play field
                    deckToField(P1CardHTML, P2CardHTML, P1CardID, P2CardID);



                    //use this to score the cards and move to deck
                    score(P1CardID, P2CardID);



                    //removes first id of cards from the array
                    deck1Ids = deck1Ids.slice(1);
                    deck2Ids = deck2Ids.slice(1);

                    //removes first value of cards from the array
                    deck1Play = deck1Play.slice(1);
                    deck2Play = deck2Play.slice(1);
                    round++;
                    console.log("Deck1: " + deck1Play);
                    console.log("Deck2: " + deck2Play);
                    console.log("TieDeck: " + TiePileValues)
                    console.log("Round #: " + round);

                }
            }

            // deprecatedfunction to generate the decks of both players
            // function generateDecks(){
            // 	for(let i =0;i<deck1.length;i++){

            // 		//create new card element
            // 		const newCard1= document.createElement('div');
            // 		const newCard2= document.createElement('div');

            // 		//create new card value
            // 		let card1Value= deck1[i];
            // 		let card2Value= deck2[i];

            // 		// Setting the ID for card 1 and 2 in order to manipulate it in the future
            // 		newCard1.id = '1Pcard'+i;
            // 		newCard2.id = '2Pcard'+i;

            // 		//id for value selection
            // 		let newCard1ValueId="1PCardValue"+i;
            // 		let newCard2ValueId="2PCardValue"+i;
            // 		//setting the HTML of newCard 1 and 2 ,specifically controlling for card value and card value id 
            // 		newCard1.innerHTML= "<div class='col-sm' id='card1' ;'><div class='flip-box'> <div class='flip-box-inner'> <div class='flip-box-front'> <img alt='Player1' style='width:150px;height:250px'> </div> <div class='flip-box-back'> <h2 id= 'Card1Title'>Card 1</h2> <p>This is the value of the card</p> <p class='p-3 border bg-dark' id='"+newCard1ValueId+"' style='width:10px;left:50%;text-align:center;'>"+card1Value+"</p> </div> </div></div></div>";
            // 		newCard2.innerHTML="<div class='col-sm' id='card2' ;'><div class='flip-box'> <div class='flip-box-inner'> <div class='flip-box-front'> <img alt='Player2' style='width:150px;height:250px'> </div> <div class='flip-box-back'> <h2 id= 'Card2Title'>Card 2</h2> <p>This is the value of the card</p> <p class='p-3 border bg-dark' id='"+newCard2ValueId+"' style='width:10px;left:50%;text-align:center;'>"+card2Value+"</p> </div> </div></div></div>";


            // 		//styling properties for card 1 
            // 		newCard1.style.position="absolute";
            // 		newCard1.style.display="inline";
            // 		newCard1.style.zIndex=zValueStart+i;

            // 		//styling properties for card 2
            // 		newCard2.style.position="absolute";
            // 		newCard2.style.display="inline";
            // 		newCard2.style.zIndex=zValueStart+i;


            // 		console.log("card1Value: "+card1Value );
            // 		//have to add value from array into card


            // 		deck1Pile.appendChild(newCard1);
            // 		deck2Pile.appendChild(newCard2);
            // 		deck1Ids.push(newCard1.id);
            // 		deck2Ids.push(newCard2.id);

            // 	}
            // }

            function score(card1Id, card2Id) {

                //retrieves HTML elements for cards
                let card1html = document.getElementById(card1Id);
                let card2html = document.getElementById(card2Id);
                let TieField = document.getElementById("TieField");

                //retrieves first element of deck values for comparison
                card1Value = deck1Play[0];
                card2Value = deck2Play[0];

                //P1  conditions
                if (card1Value > card2Value) {
                    P1Score++;
                    P1ScoreHTML.innerText = P1Score;
                    winnerHTML.innerText = "P1 wins!";
                    whoWonLastRound = 1;
                    deck1Play.push(card1Value, card2Value);
                    deck1Ids.push(card1Id, card2Id);
                    // $("#"+card1Id).appendTo("#Deck1");
                    // $("#"+card2Id).appendTo("#Deck2");
                    lastPlayedNonTieId.push(card1Id, card2Id);
                    lastPlayedNonTieValue.push(card1Value, card2Value);
                    console.log("added: " + card1Id + " and " + card2Id + " to last pile");
                    if (TiePile.length > 0) {

                        fieldToNext();

                    }


                }
                //P2  Conditions
                else if (card1Value < card2Value) {
                    P2Score++;
                    P2ScoreHTML.innerText = P2Score;
                    winnerHTML.innerText = "P2 wins!";
                    whoWonLastRound = 2;
                    deck2Play.push(card1Value, card2Value);
                    deck2Ids.push(card1Id, card2Id);
                    // $("#"+card1Id).appendTo(deck2Pile);
                    // $("#"+card2Id).appendTo(deck2Pile);
                    lastPlayedNonTieId.push(card1Id, card2Id);
                    lastPlayedNonTieValue.push(card1Value, card2Value);
                    console.log("added: " + card1Id + " and " + card2Id + " to last pile");
                    if (TiePile.length > 0) {

                        fieldToNext(TiePile, TiePileValues);

                    }

                }
                //Tie Conditions
                else if (card1Value === card2Value) {
                    whoWonLastRound = 0;

                    document.getElementById('winner').innerText = "It's a tie!";

                    TieField.appendChild(card1html);
                    TieField.appendChild(card2html);
                    TiePile.push(card1Id);
                    TiePile.push(card2Id);
                    TiePileValues.push(card1Value, card2Value);

                }
                console.log("P1Score: " + card1Value + " v. P2Score: " + card2Value);


            }

            function deckToField(card1, card2, card1Id, card2Id) {


                let field1 = document.getElementById("P1FieldCardHolder");
                let field2 = document.getElementById("P2FieldCardHolder");

                $("#" + card1Id).appendTo("#P1FieldCardHolder");
                $("#" + card2Id).appendTo("#P2FieldCardHolder");




                // Animation Code Disabled For Functionality
                // let start = Date.now();

                // let timer = setInterval(function(){
                // 	let timePassed = Date.now() -start;
                // 	let card1id = '1Pcard'+index;
                // 	let card2id = '2Pcard'+index;


                // 	let card1 =document.getElementById(card1id);
                // 	let card2 =document.getElementById(card2id);
                // 	let field1 =document.getElementById("P1Field");
                // 	let field2 =document.getElementById("P2Field");


                // 	// This is the code that contains the animations
                // 	// card1.style.position = 'relative';
                // 	// card1.style.left = timePassed/5 +'px';
                // 	// card1.style.bottom = timePassed/5 +'px';

                // 	// card2.style.position = 'relative';
                // 	// card2.style.right = timePassed/5 +'px';
                // 	// card2.style.bottom = timePassed/5 +'px';

                // field1.appendChild(card1);
                // field2.appendChild(card2);


                // if (timePassed>1000){
                // 		clearInterval(timer);
                // 	}
                // },20);



            }

            //function that handles transition between draw rounds
            function fieldToNext() {
                while (TiePile.length != 0) {
                    let card1Temp = document.getElementById(TiePile[0]);
                    let card2Temp = document.getElementById(TiePile[1]);
                    let card1Value = TiePileValues[0];
                    let card2Value = TiePileValues[1];
                    if (whoWonLastRound === 1) {
                        deck1Pile.appendChild(card1Temp);
                        deck1Pile.appendChild(card2Temp);
                        deck1Play.push(card1Value, card2Value);
                        deck1Ids.push(TiePile[0], TiePile[1]);

                    } else if (whoWonLastRound === 2) {
                        deck2Pile.appendChild(card1Temp);
                        deck2Pile.appendChild(card2Temp);
                        deck2Play.push(card1Value, card2Value);
                        deck2Ids.push(TiePile[0], TiePile[1]);
                    }
                    TiePile = TiePile.slice(1);
                    TiePile = TiePile.slice(1);
                    TiePileValues = TiePileValues.slice(1);
                    TiePileValues = TiePileValues.slice(1);
                }
            }



        </script>


        </html>
        <%- include ('../partials/footer') %>